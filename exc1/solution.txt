Планирование: анализ, идентификация проблем и поиск решений

I. Существующие проблемы:

1. Отсутствие механизмов масштабирование у ключевых приложений, брокеров сообщений и баз данных, отсутствие механизмов шардирования и репликация БД приводит к рискам потери доступности приложений и баз данных в случае роста нагрузки со стороны пользователей
2. Отсутствие механизмов мониторинга приводит к рискам потери доступности приложений и невозможности своевременного отслеживания нагрузки на приложения.
3. Отсутствие механизмов трейсинга запросов приводит к рискам неконтролируемости действий приложения и невозможности своевременного отслеживания нагрузки на приложения.
4. Отсутствие механизмов логирования приводит к рискам невозможности своевременного выявления узких мест и проблем приложений
5. Отсутствие механизмов снижения нагрузки Circuit Breaker и BackPressure приводит к рискам потери данных и репутации у пользователей в случае повышенной нагрузки на приложения.
6. Отсутствие механизмов кеширования приводит к рискам потери данных в случае повышенной нагрузки на приложения. 
7. Отсутствие механизмов и паттерна Database per Service , что приводит к нагрузке на одну БД и рискам потери данных в случае вывода из строя БД
8. Отсутствие механизма автотестирования при deploy в продуктивную среду, что увеличивает время релизов и повышает количество багов приложения.

II. Инициативы и предложения и приоритет их использования

High. 
1. Внедрить средства мониторинга и определить ключевые отказа в обслуживании, а также высокую нагруженность на конкретные системы
2. Внедрить средства масштабирования приложений, баз данных и брокеров сообщений, добавить репликацию к базам данных для повышения отказоустойчивости.
3. Внедрить паттерн Database per Service и повысить отказоустойчивость каждого приложения

Medium. 
4. Внедрить средства логирования приложения для определения "проблемных" и "болезненных" точек приложений на ранних этапах
5. Внедрить механизмы кеширования в приложения главной страницы для ограничения количества запросов в базу данных 
6. Внедрить средства трейсинга и отслеживания запросов в приложениях во избежания ситуации потери данных 

Low. 
7. Внедрить механизмы Circuit Breaker и BackPressure , чтобы снизить количество запросов и повысить отказоустойчивость
8. Исопльзовать механизмы авто-тестирования при deploy в продуктивную среду и снизить количество баг при выходе релизов


III. Архитектура приложения и список инициатив на ближайшие полгода 

Архитектура приложения должна быть масштабируемой и отслеживаемой через ближайшие полгода с использованием таких подходов, как кеширование, мониторинг, трейсинг,логирование и др. паттернов. У каждого сервиса должна быть своя база данных, которая имеет реплики и резервные копии. В случае выбора только трех инициатив, необходимо остановиться на шардировании и реплицировании баз данных, мониторинге и улучшения процесса CI\CD в виде добавления автотестирований. Это позволит определить проблемные точки , повысить ускоренную доставку релизов в случае выявления багов и повысить отказоустойчивость данных. 

